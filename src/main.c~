#include <stdio.h>
#include <stdlib.h>
#include "tokenizer.h"
#include "history.h"

int main (void) {
  int c;

  printf("Type in a word & press ENTER: \n");
  
  c = getchar();
  while (c != EOF) {
    putchar(c);
    printf("\n Char ASCII: %x\n", c);
    c = getchar();
  }
  /**/
  // Sample string
  //char str[] = "Hello Again World";
  //char *str_ptr = str;
  //char n = '\0';
  //char **n_token = tokenize(str_ptr);
  //printf("%s\n", n_token[0]);
  //printf("%s\n", n_token[1]);
  //printf("%s\n", n_token[2]);
  //printf("%s\n", n_token[3]);
  //print_tokens(n_token);
  //printf("%s\n", get_token(n_token, 2));
  //printf("Token Address: %x\n", n_token);
  //free_tokens(n_token);
  //printf("Token Freed (Address ?): %x\n", n_token);
  //printf("%c\n", n_token[0][0]);
  //printf("%s\n", copy_str(str, 4));
  
  // Print number of words in string
  //printf("Number of Words: %d\n", count_words(str_ptr));
  //char *n_string = copy_str(str, 2); 
  //printf("Print Malloc Function String Output: %s\n", n_string);
  //free(n_string);
  //printf("Freed Memory: %c\n", *n_string);
  //n_token = tokenize(str_ptr);
  
}

int space_char(char a) {
  // Checks if a is a space(32), tab(9), or new line(10) character
  if (a == 32 || a == 9 || a == 10) {
    return 1;
  } else {
    return 0;
  }
}

int non_space_char(char a) {
  int r = space_char(a) == 0 ? 1 : 0; // returns opposite of space_char()
  return r;
}

char *word_start(char *str) {
  // "Scan" string until you find a non-whitespace character
  int i = 0;
  while (space_char(*(str + i))) { i++; }
  
  return (str + i); 
}

char *word_end(char *str) {
  // Find the end of the current word (& stop scanning if at end of string)
  int i = 0;
  while(non_space_char(*(str + i)) == 1 && *(str + i) != 0) { i++; }
  return (str + i);
}

int count_words(char *str) {
  // Return 0 if there are no words on the string
  if (*(word_start(str)) == 0) { return 0; }
  
  // Count the number of words in a string
  // and exit loop once end of string is reached
  int num_words = 0; // we have at least 1 word if the function wasn't exited
  while (1) {
    str = word_start(str);
    if (*str == 0) { break; }
    str = word_end(str);
    num_words++;
  }
    // short bytes = (ptr2 - ptr1) * sizeof(*ptr1);
    // printf("Pointer Distance %d: \n", bytes);

  return num_words;
}

char *copy_str(char *inStr, short len) {
  char *new_str = (char*) malloc(sizeof(char) * len);
  for (short i = 0; i < len; i++) {
    *(new_str + i) = *(inStr + i); // i used to be len
  }
  return new_str;
}

char **tokenize(char *str) {
  short token_len = count_words(str) + 1; // length of array to be returned
  char **token = (char**) malloc(sizeof(char) * token_len);
  printf("%d\n", token_len);
  char *tmp_p1, *tmp_p2; // temporary pointers
  short w_len = 0; // distance between the 2 temp pointers (word length)
  for (int i = 0; i < token_len; i++) {
    if (i < token_len - 1) {
      tmp_p1 = word_start(str);
      tmp_p2 = word_end(tmp_p1);
      w_len = (tmp_p2 - tmp_p1) * sizeof(*tmp_p1);
      str = tmp_p1;
      token[i] = copy_str(str, w_len); // might have to do w_len-1
      str = tmp_p2;
    } else {
      token[i] = "\0";
    }
  }
  return token;
}

void print_tokens(char **tokens) {
  int i = 0, safety = 0;
  while (tokens[i][0] != 0 && safety < 20) {
    printf("%s\n", tokens[i]);
    i++;
    safety++;
  }
}

char *get_token(char **tokens, int id) {
  char *ptr = tokens[id];
  return ptr;
}

void free_tokens(char **tokens) {
  int i = 0, safety = 20;
  while (safety < 20) { 
    if (tokens[i][0] == 0) {
      free(tokens[i]);
      break;
    } else {
      free(tokens[i]);
    }
    safety++;
  }
  free(tokens);
}
